{"version":3,"file":"static/js/557.aa957a7a.chunk.js","mappings":"sLAGO,MAAMA,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAOC,IAAdF,CAAkBG,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wyCCHnCC,EAAQ,CACjBC,QAAS,2BCDAC,EAAiBA,CAACC,EAAQC,EAAWC,KAC9C,IAAKF,EACD,KAAM,iFAEV,IAAKC,EACD,KAAM,wEAEV,IAAKC,EACD,KAAM,mFAEV,OAAO,CAAI,ECVR,MAAMC,EACTC,WAAAA,CAAYC,GACRC,KAAKC,OAASF,EAAaE,OAC3BD,KAAKE,KAAOH,EAAaI,YAC7B,ECFG,MAAMC,EAAW,SAACC,EAAKC,GAAuB,IAAjBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3C,OAAO,IAAIG,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,QAAQC,IAAgB,IAAf,OAAEC,GAAQD,EACpC,MAAME,EAAiB,IAAItB,EAAsBqB,GACnB,MAA1BC,EAAelB,QAA0C,OAAxBkB,EAAejB,KAChDU,EAAQO,GAGRN,EAAOM,EACX,IAEJL,EAAIE,iBAAiB,SAASI,IAAgB,IAAf,OAAEF,GAAQE,EACrCP,EAAO,IAAIhB,EAAsBqB,GAAQ,IAE7CJ,EAAIO,KAAK,OAAQ9B,EAAMC,QAAUa,GAAK,GACtCiB,OAAOC,KAAKhB,GAASiB,SAASC,IAC1BX,EAAIY,iBAAiBD,EAAKlB,EAAQkB,GAAK,IAE3CX,EAAIa,KAAKrB,EAAK,GAEtB,ECnBA,ECOoBqB,CAAChC,EAAWC,EAAYgC,EAAelC,KACvD,MAAMmC,EAAMnC,GAAUH,EAAMuC,QAC5BrC,EAAeoC,EAAKlC,EAAWC,GAC/B,MAAMmC,EAAS,CACXC,YAAa,QACbC,QAASJ,EACTK,WAAYvC,EACZwC,YAAavC,EACbwC,gBAAiBR,GAErB,OAAOxB,EAAS,uBAAwBiC,KAAKC,UAAUP,GAAS,CAC5D,eAAgB,oBAClB,E,gBCrBC,MAAMQ,EAAcrD,EAAAA,GAAOsD,KAAInD,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yZAsBzBmD,EAAQvD,EAAAA,GAAOwD,MAAKC,IAAAA,GAAArD,EAAAA,EAAAA,GAAA,+MAapBsD,EAAW1D,EAAAA,GAAO2D,SAAQC,IAAAA,GAAAxD,EAAAA,EAAAA,GAAA,0PAe1ByD,EAAS7D,EAAAA,GAAO8D,OAAMC,IAAAA,GAAA3D,EAAAA,EAAAA,GAAA,2TAoBtB4D,EAAehE,EAAAA,GAAOiE,EAACC,IAAAA,GAAA9D,EAAAA,EAAAA,GAAA,sEAMvB+D,EAAiBnE,EAAAA,GAAOiE,EAACG,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,wE,aCnEtC,MAiHA,EAjHaiE,KACX,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvCC,KAAM,GACNC,MAAO,GACPC,QAAS,MAGJC,EAAQC,IAAaL,EAAAA,EAAAA,UAAS,CAAC,IAC/BM,EAAgBC,IAAqBP,EAAAA,EAAAA,UAAS,IAiC/CQ,EAAgBC,IACpB,MAAM,KAAER,EAAI,MAAES,GAAUD,EAAEjD,OAC1BuC,EAAY,IACPD,EACH,CAACG,GAAOS,GACR,EA+BJ,OACEC,EAAAA,EAAAA,MAAC9B,EAAW,CAAC+B,SA7BOH,IACpBA,EAAEI,iBACF,MAAMC,EAzCSC,MACf,IAAIX,EAAS,CAAC,EA2Bd,OAxBKN,EAASG,KAAKe,OAERlB,EAASG,KAAKe,OAAOjE,OAAS,EACvCqD,EAAOH,KAAO,0CACL,cAAcgB,KAAKnB,EAASG,KAAKe,UAC1CZ,EAAOH,KAAO,4CAJdG,EAAOH,KAAO,mBAQXH,EAASI,MAEF,eAAee,KAAKnB,EAASI,OAGvC,kDAAkDe,KAAKnB,EAASI,SAEhEE,EAAOF,MAAQ,8CAJfE,EAAOF,MAAQ,2BAFfE,EAAOF,MAAQ,oBAUZJ,EAASK,QAAQa,SACpBZ,EAAOD,QAAU,uBAGZC,CAAM,EAaYW,GACzBV,EAAUS,GACmC,IAAzClD,OAAOC,KAAKiD,GAAkB/D,QAChCmE,EAEI,kBACA,mBACApB,EACA,qBAEDqB,MACEC,IACCC,QAAQC,IAAIF,EAAO5E,MACnB+D,EAAkB,8BAClBR,EAAY,CAAEE,KAAM,GAAIC,MAAO,GAAIC,QAAS,KAC5CE,EAAU,CAAC,EAAE,IAEdkB,IACCF,QAAQC,IAAIC,EAAM/E,MAClB+D,EAAkB,IAClBF,EAAU,CAAEmB,OAAQ,wCAAyC,GAGrE,EAIoCC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAC3C,EAAK,CACJ4C,KAAK,OACL1B,KAAK,OACL2B,YAAY,YACZlB,MAAOZ,EAASG,KAChB4B,SAAUrB,EACVsB,UAAQ,IAET1B,EAAOH,OAAQyB,EAAAA,EAAAA,KAAClC,EAAY,CAAAiC,SAAErB,EAAOH,QACtCyB,EAAAA,EAAAA,KAAC3C,EAAK,CACJ4C,KAAK,QACL1B,KAAK,QACL2B,YAAY,aACZlB,MAAOZ,EAASI,MAChB2B,SAAUrB,EACVsB,UAAQ,IAET1B,EAAOF,QAASwB,EAAAA,EAAAA,KAAClC,EAAY,CAAAiC,SAAErB,EAAOF,SACvCwB,EAAAA,EAAAA,KAACxC,EAAQ,CACPe,KAAK,UACL2B,YAAY,eACZlB,MAAOZ,EAASK,QAChB0B,SAAUrB,EACVsB,UAAQ,IAET1B,EAAOD,UAAWuB,EAAAA,EAAAA,KAAClC,EAAY,CAAAiC,SAAErB,EAAOD,WACzCuB,EAAAA,EAAAA,KAACrC,EAAM,CAACsC,KAAK,SAAQF,SAAC,SACrBrB,EAAOoB,SAAUE,EAAAA,EAAAA,KAAClC,EAAY,CAAAiC,SAAErB,EAAOoB,SACvClB,IAAkBoB,EAAAA,EAAAA,KAAC/B,EAAc,CAAA8B,SAAEnB,MACxB,E,cCnHlB,MAyCA,EAzCgByB,KACdpB,EAAAA,EAAAA,MAACpF,EAAc,CACbyG,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,WAAY,CAAEC,SAAU,GAAIX,SAAA,EAE5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,WACQ,KACTd,EAAAA,EAAAA,MAAA,KACE0B,KAAK,sEACL7E,OAAO,SACP8E,IAAI,sBAAqBb,SAAA,CAC1B,aACUC,EAAAA,EAAAA,KAACa,EAAAA,IAAU,OACjB,IAAI,eAGX5B,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,WACQ,KACTd,EAAAA,EAAAA,MAAA,KACE0B,KAAK,+BACL7E,OAAO,SACP8E,IAAI,sBAAqBb,SAAA,CAC1B,WACQC,EAAAA,EAAAA,KAACc,EAAAA,IAAQ,OACb,IAAI,eAGXd,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kDACJC,EAAAA,EAAAA,KAAC7B,EAAI,IAAG,KACRc,EAAAA,EAAAA,MAAA,OAAK8B,UAAU,mBAAkBhB,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,0CACuC,KACxCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uC","sources":["components/Contact/Contact.styles.js","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/send/send.js","components/Form/Form.styles.js","components/Form/Form.js","components/Contact/Contact.js"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport const ContactWrapper = styled(motion.div)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 3rem 1rem 1rem; /* Adjust padding for smaller screens */\r\n  text-align: center;\r\n  font-family: \"Roboto\", sans-serif; /* Choose a font */\r\n  overflow-x: hidden; /* Prevent horizontal scrolling */\r\n\r\n  @media (min-width: 480px) {\r\n    padding: 4rem 1rem 2rem;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    padding: 5rem 1rem 3rem;\r\n  }\r\n\r\n  a {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    font-size: 1.5rem;\r\n    color: #007bff;\r\n    text-decoration: none;\r\n    margin: 0.1rem 0; /* Add margin between links */\r\n\r\n    &:hover {\r\n      color: #0056b3;\r\n    }\r\n\r\n    svg {\r\n      margin-left: 0.5rem;\r\n    }\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  p {\r\n    margin-bottom: 1rem; /* Small vertical spacing for mobile screens */\r\n  }\r\n\r\n  h1 {\r\n    margin-top: 1rem; /* Add space above main header */\r\n  }\r\n\r\n  .directly-contact {\r\n    margin-top: 2rem; /* Add space above the \"Directly Contact\" section */\r\n  }\r\n\r\n  @media (min-width: 480px) {\r\n    h1,\r\n    h2,\r\n    p {\r\n      margin-bottom: 1rem; /* Adjust vertical spacing for medium screens */\r\n    }\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    h1,\r\n    h2,\r\n    p {\r\n      margin-bottom: 1rem; /* Increase vertical spacing for larger screens */\r\n    }\r\n  }\r\n`;\r\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import styled from \"styled-components\";\r\n\r\nexport const FormWrapper = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 90%; /* Adjust to fit smaller screens */\r\n  max-width: 500px;\r\n  margin: auto;\r\n  padding: 2rem;\r\n  background: #f9f9f9;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    width: 100%;\r\n    padding: 1rem;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 0.5rem;\r\n  margin: 0.5rem 0;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n\r\n  @media (max-width: 480px) {\r\n    font-size: 0.875rem;\r\n    padding: 0.4rem;\r\n  }\r\n`;\r\n\r\nexport const TextArea = styled.textarea`\r\n  padding: 0.5rem;\r\n  margin: 0.5rem 0;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n  resize: vertical;\r\n  min-height: 100px;\r\n\r\n  @media (max-width: 480px) {\r\n    font-size: 0.875rem;\r\n    padding: 0.4rem;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 0.75rem;\r\n  margin: 1rem 0;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    font-size: 0.875rem;\r\n    padding: 0.6rem;\r\n  }\r\n`;\r\n\r\nexport const ErrorMessage = styled.p`\r\n  color: red;\r\n  font-size: 0.875rem;\r\n  margin: 0.5rem 0;\r\n`;\r\n\r\nexport const SuccessMessage = styled.p`\r\n  color: green;\r\n  font-size: 0.875rem;\r\n  margin: 0.5rem 0;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\nimport {\r\n  FormWrapper,\r\n  Input,\r\n  TextArea,\r\n  Button,\r\n  ErrorMessage,\r\n  SuccessMessage,\r\n} from \"./Form.styles\";\r\n\r\nconst Form = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  const validate = () => {\r\n    let errors = {};\r\n\r\n    // Name validation\r\n    if (!formData.name.trim()) {\r\n      errors.name = \"Name is required\";\r\n    } else if (formData.name.trim().length < 3) {\r\n      errors.name = \"Name must be at least 3 characters long\";\r\n    } else if (/[^a-zA-Z\\s]/.test(formData.name.trim())) {\r\n      errors.name = \"Name can only contain letters and spaces\";\r\n    }\r\n\r\n    // Email validation\r\n    if (!formData.email) {\r\n      errors.email = \"Email is required\";\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      errors.email = \"Email address is invalid\";\r\n    } else if (\r\n      /temp-mail|10minutemail|mailinator|guerrillamail/.test(formData.email)\r\n    ) {\r\n      errors.email = \"Disposable email addresses are not allowed\";\r\n    }\r\n\r\n    // Message validation\r\n    if (!formData.message.trim()) {\r\n      errors.message = \"Message is required\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const validationErrors = validate();\r\n    setErrors(validationErrors);\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      emailjs\r\n        .send(\r\n          \"service_zf61gx6\",\r\n          \"template_926q5ij\",\r\n          formData,\r\n          \"ywKzTbPKd3ATp9vbv\"\r\n        )\r\n        .then(\r\n          (result) => {\r\n            console.log(result.text);\r\n            setSuccessMessage(\"Message sent successfully!\");\r\n            setFormData({ name: \"\", email: \"\", message: \"\" });\r\n            setErrors({});\r\n          },\r\n          (error) => {\r\n            console.log(error.text);\r\n            setSuccessMessage(\"\");\r\n            setErrors({ submit: \"An error occurred, please try again.\" });\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormWrapper onSubmit={handleSubmit}>\r\n      <h2>Contact Me</h2>\r\n      <Input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Your Name\"\r\n        value={formData.name}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n      {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}\r\n      <Input\r\n        type=\"email\"\r\n        name=\"email\"\r\n        placeholder=\"Your Email\"\r\n        value={formData.email}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n      {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}\r\n      <TextArea\r\n        name=\"message\"\r\n        placeholder=\"Your Message\"\r\n        value={formData.message}\r\n        onChange={handleChange}\r\n        required\r\n      />\r\n      {errors.message && <ErrorMessage>{errors.message}</ErrorMessage>}\r\n      <Button type=\"submit\">Send</Button>\r\n      {errors.submit && <ErrorMessage>{errors.submit}</ErrorMessage>}\r\n      {successMessage && <SuccessMessage>{successMessage}</SuccessMessage>}\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { ContactWrapper } from \"./Contact.styles\";\r\nimport Form from \"../Form/Form\";\r\nimport { FaGithub, FaLinkedin } from \"react-icons/fa\";\r\n\r\nconst Contact = () => (\r\n  <ContactWrapper\r\n    initial={{ opacity: 0 }}\r\n    animate={{ opacity: 1 }}\r\n    transition={{ duration: 1 }}\r\n  >\r\n    <h1>Contact</h1>\r\n    <p>\r\n      Check my{\" \"}\r\n      <a\r\n        href=\"https://www.linkedin.com/in/silvio-dos-santos-j%C3%BAnior-18704b57/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        LinkedIn <FaLinkedin />\r\n      </a>{\" \"}\r\n      profile.\r\n    </p>\r\n    <p>\r\n      Check my{\" \"}\r\n      <a\r\n        href=\"https://github.com/sjrsantos\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        GitHub <FaGithub />\r\n      </a>{\" \"}\r\n      profile.\r\n    </p>\r\n    <h2>Use the following Form to send me a message.</h2>\r\n    <Form /> {/* Use the Form component here */}\r\n    <div className=\"directly-contact\">\r\n      <h2>Contact directly</h2>\r\n      <p>\r\n        Get in touch using the following email:{\" \"}\r\n        <b>silvio-sjunior@hotmail.com</b>\r\n      </p>\r\n    </div>\r\n  </ContactWrapper>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["ContactWrapper","styled","motion","div","_templateObject","_taggedTemplateLiteral","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","FormWrapper","form","Input","input","_templateObject2","TextArea","textarea","_templateObject3","Button","button","_templateObject4","ErrorMessage","p","_templateObject5","SuccessMessage","_templateObject6","Form","formData","setFormData","useState","name","email","message","errors","setErrors","successMessage","setSuccessMessage","handleChange","e","value","_jsxs","onSubmit","preventDefault","validationErrors","validate","trim","test","emailjs","then","result","console","log","error","submit","children","_jsx","type","placeholder","onChange","required","Contact","initial","opacity","animate","transition","duration","href","rel","FaLinkedin","FaGithub","className"],"sourceRoot":""}